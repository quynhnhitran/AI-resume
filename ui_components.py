import streamlit as st
from ai_service import generate_interview_advice
┬а
def set_custom_css():
┬а ┬а st.markdown(
┬а ┬а ┬а ┬а """
┬а ┬а ┬а ┬а <style>
┬а ┬а ┬а ┬а .title {font-size:28px; font-weight:700; color:#0B3D91; margin-bottom:6px;}
┬а ┬а ┬а ┬а .subtitle {color:#444444; margin-top:0; margin-bottom:18px;}
┬а ┬а ┬а ┬а .card {background:#ffffff;border:1px solid #e6e9ef;padding:14px;border-radius:10px;}
┬а ┬а ┬а ┬а .score-large {font-size:34px; font-weight:700;}
┬а ┬а ┬а ┬а .muted {color:#6b7280;}
┬а ┬а ┬а ┬а </style>
┬а ┬а ┬а ┬а """,
┬а ┬а ┬а ┬а unsafe_allow_html=True,
┬а ┬а )
┬а
def display_title():
┬а ┬а st.markdown('<div class="title">­ЪДа AI Resume Analyzer</div>', unsafe_allow_html=True)
┬а ┬а st.markdown('<div class="subtitle">Upload your resume and paste the job description to get a similarity score and an AI analysis report.</div>', unsafe_allow_html=True)
┬а
def upload_ui():
┬а ┬а with st.container():
┬а ┬а ┬а ┬а c1, c2 = st.columns([2, 1])
┬а ┬а ┬а ┬а with c1:
┬а ┬а ┬а ┬а ┬а ┬а uploaded_file = st.file_uploader("­ЪЊё Upload Resume (PDF)", type=["pdf"], key="uploader")
┬а ┬а ┬а ┬а ┬а ┬а if uploaded_file:
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а st.session_state.resume_filename = uploaded_file.name
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а try:
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а preview_text = extract_text(uploaded_file, maxpages=1)
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а except Exception:
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а uploaded_file.seek(0)
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а try:
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а preview_text = extract_text(uploaded_file)
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а except Exception:
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а preview_text = ""
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а if preview_text:
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а with st.expander("Preview extracted text (first 300 chars)"):
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а st.write(preview_text[:300])
┬а ┬а ┬а ┬а with c2:
┬а ┬а ┬а ┬а ┬а ┬а st.markdown("**Need help?**")
┬а ┬а ┬а ┬а ┬а ┬а st.markdown("- Use a clean, text-based PDF\n- Avoid scanned images without OCR\n")
┬а ┬а st.divider()
┬а ┬а col_action = st.columns([1, 1])
┬а ┬а if col_action[1].button("Next: Job Description", use_container_width=True):
┬а ┬а ┬а ┬а st.session_state.step = "job"
┬а ┬а ┬а ┬а st.session_state.job_desc = st.session_state.get("job_desc", "")
┬а ┬а ┬а ┬а st.rerun()
┬а ┬а return uploaded_file
┬а
def job_desc_ui():
┬а ┬а with st.container():
┬а ┬а ┬а ┬а jd_text = st.text_area("­Ъњ╝ Paste Job Description", placeholder="Enter the job description here...", height=240, key="jd")
┬а ┬а ┬а ┬а if jd_text:
┬а ┬а ┬а ┬а ┬а ┬а st.session_state.job_desc = jd_text
┬а ┬а st.divider()
┬а ┬а col_back_next = st.columns([1, 1])
┬а ┬а if col_back_next[0].button("Рєљ Back to Upload", use_container_width=True):
┬а ┬а ┬а ┬а st.session_state.step = "input"
┬а ┬а ┬а ┬а st.rerun()
┬а
┬а ┬а if col_back_next[1].button("Analyze РќХ№ИЈ", use_container_width=True):
┬а ┬а ┬а ┬а if not st.session_state.resume_filename and not st.session_state.job_desc:
